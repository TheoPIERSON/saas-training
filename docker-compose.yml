services:
  saas-training-postgres: # Nom du container de la BDD
    image: postgres:15
    ports:
      - "5432:5432"
    environment: # Adresse de la base de donnees depuis les variables d'environnement
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - saas-training-postgres-data:/var/lib/postgresql/data # Volume pour persister la data
    healthcheck: # Interval pour lancer le reste du code 10s apres la fin de la BDD
      test: ["CMD", "pg_isready", "-q", "-d", "${DB_NAME}", "-U", "${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend: # Nom du container du frontend
    image: sub-guard-frontend-image
    ports:
      - "3000:3000"
    build:
      context: ./front-saas-training
      dockerfile: ./Dockerfile
    volumes:
      - ./front-saas-training:/usr/local/app # Montage du code source local dans le conteneur
    depends_on:
      - saas-training-postgres

  backend: # Nom du container du backend
    image: sub-guard-backend-image
    ports:
      - "8080:8080"
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/usr/src/app # Montage du code source local dans le conteneur
    environment:
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      STRIPE_API_KEY: ${STRIPE_API_KEY}

    depends_on:
      - saas-training-postgres

volumes:
  saas-training-postgres-data:
